package AES;

import java.util.Arrays;

/**
 * AES.AES 128
 */
public class AES {
    private int[][] state = new int[4][4];
    private int[][] roundKeys = new int[4][44];

    // TODO: generate by myself
    // sbox table for subBytes
    private static final int[][] sbox = {
            {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
            {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
            {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
            {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
            {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
            {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
            {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
            {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
            {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
            {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
            {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
            {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
            {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
            {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
            {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
            {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
    };

    // TODO: generate by myself
    // inverse sbox table for invSubBytes
    private static final int[][] invsbox = {
            {0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
            {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
            {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
            {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
            {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
            {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
            {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
            {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
            {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
            {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
            {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
            {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
            {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
            {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
            {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
            {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
    };

    // matrix used for mixColumns in Galois field
    private static final int[][] galois = {
            {0x02, 0x03, 0x01, 0x01},
            {0x01, 0x02, 0x03, 0x01},
            {0x01, 0x01, 0x02, 0x03},
            {0x03, 0x01, 0x01, 0x02}
    };

    // inverse matrix used for invMixColumns in Galois field
    private static final int[][] invgalois = {
            {0x0e, 0x0b, 0x0d, 0x09},
            {0x09, 0x0e, 0x0b, 0x0d},
            {0x0d, 0x09, 0x0e, 0x0b},
            {0x0b, 0x0d, 0x09, 0x0e}
    };

    // RCon array used for Key Expansion
    private static final int[] rcon = {
            0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};

    public AES() {
        // empty constructor
    }

    public int[][] encrypt(int[][] plainText, int[][] key) {
        // copying input data to the initial state
        this.copy2DArray(this.state, plainText);

        // create round keys using given key
        this.keySchedule(key);

        // initial round
        this.addRoundKey(key);

        // 9 main rounds
        for (int i = 1; i < 10; i++) { // 10 - number of rounds
            this.subBytes(false);
            this.shiftRows(false);
            this.mixColumns(false);
            this.addRoundKey(subKey(i));
        }

        // final round
        this.subBytes(false);
        this.shiftRows(false);
        this.addRoundKey(subKey(10));

        return this.state;
    }

    public int[][] decrypt(int[][] cipherText, int[][] key) {
        // copying input data to the initial state
        this.copy2DArray(this.state, cipherText);

        // create round keys using given key
        this.keySchedule(key);

        // initial round
        this.addRoundKey(subKey(10));

        // 9 main rounds
        for (int i = 9; i > 0; i--) { // 10 - number of rounds
            this.shiftRows(true);
            this.subBytes(true);
            this.addRoundKey(subKey(i));
            this.mixColumns(true);
        }

        // final round
        this.shiftRows(true);
        this.subBytes(true);
        this.addRoundKey(subKey(0));

        return this.state;
    }

    /**
     * Pulls out the subkey from the key formed from the keySchedule method
     * @param keynum index of where to fetch the subkey
     * @return The chunk of the scheduled key based on begin.
     */
    private int[][] subKey(int keynum) {
        int[][] arr = new int[4][4];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                arr[i][j] = this.roundKeys[i][4 * keynum + j];
            }
        }
        return arr;
    }

    /**
     * In the AddRoundKey step, the subkey is combined with the state.
     * For each round, a chunk of the key scheduled is pulled; each subkey
     * is the same size as the state. Each element in the byte matrix is XOR'd
     * with each element in the chunk of the expanded key.
     *
     * @param keymatrix chunk of the expanded key
     */
    private void addRoundKey(int[][] keymatrix) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                this.state[i][j] ^= keymatrix[i][j];
            }
        }
    }

    /**
     * Replaces all elements in the passed array with values in sbox[][].
     * @param inv if false - subBytes, else - invSubBytes
     */
    private void subBytes(boolean inv) {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                int hex = this.state[i][j];
                if (!inv) {
                    this.state[i][j] = AES.sbox[hex / 16][hex % 16];
                } else {
                    this.state[i][j] = AES.invsbox[hex / 16][hex % 16];
                }
            }
        }
    }

    /**
     * In the ShiftRows() transformation, the bytes in the last three rows of the State are cyclically
     * shifted over different numbers of bytes (offsets): 0, 1, 2, 3. The first row is not shifted.
     * @param inv if false - subBytes, else - invSubBytes
     */
    private void shiftRows(boolean inv) {
        int[][] shiftedState = new int[4][4];
        // shift rows
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (!inv) {
                    shiftedState[i][j] = this.state[i][(j + i) % 4];
                } else {
                    shiftedState[i][j] = this.state[i][(j - i + 4) % 4];
                }
            }
        }
        // save result
        copy2DArray(this.state, shiftedState);
    }

    /**
     * The MixColumns() transformation operates on the State column-by-column,
     * treating each column as a four-term polynomial.
     * Each column multiplies by galois matrix AES.AES.galois.
     * The result replaces corresponding column in state.
     * @param inv if false - subBytes, else - invSubBytes
     */
    private void mixColumns(boolean inv) {
        for (int i = 0; i < 4; i++) {
            // get i-th column
            int[] col = getCol(this.state, i);
            int[] row;

            for (int j = 0; j < 4; j++) {
                // get j-th row from galois matrix for mixColumns
                if (!inv) {
                    row = AES.galois[j];
                } else {
                    row = AES.invgalois[j];
                }
                this.state[j][i] = vectorMulGF(col, row);
            }
        }
    }

    /**
     * The AES.AES algorithm takes the Cipher Key, and performs a Key Expansion routine
     * to generate a key schedule. As a result we will get 10 round keys saved in roundKeys matrix.
     * @param key cipher key
     */
    private void keySchedule(int[][] key) {
        // save key to the 0-th position
        for (int i = 0; i < 4; i++) {
            System.arraycopy(key[i], 0, this.roundKeys[i], 0, 4);
        }

        // generate 10 round keys
        for (int i = 0; i < 10; i++) {

            // get last column from previous key
            int[] T = getCol(roundKeys, 4*i + 3);

            // rotate bytes
            int tmp = T[0];
            System.arraycopy(T, 1, T, 0, 3);
            T[3] = tmp;

            // sub bytes
            for (int j = 0; j < 4; j++) {
                T[j] = AES.sbox[T[j] / 16][T[j] % 16];
            }

            // XOR
            T[0] = T[0] ^ rcon[i+1];

            // generate columns for current round key
            setCol(roundKeys, 4*i + 4, vectorXOR(getCol(roundKeys, 4*i), T));
            setCol(roundKeys, 4*i + 5, vectorXOR(getCol(roundKeys, 4*i+1),
                                                        getCol(roundKeys, 4*i+4)));
            setCol(roundKeys, 4*i + 6, vectorXOR(getCol(roundKeys, 4*i+2),
                                                        getCol(roundKeys, 4*i+5)));
            setCol(roundKeys, 4*i + 7, vectorXOR(getCol(roundKeys, 4*i+3),
                                                        getCol(roundKeys, 4*i+6)));
        }
    }

    // helper method which copies a 2D array
    private void copy2DArray(int[][] destination, int[][] source) {
        assert destination.length == source.length && destination[0].length == source[0].length;
        for(int i = 0; i < destination.length;i++) {
            System.arraycopy(source[i], 0, destination[i], 0, destination[0].length);
        }
    }

    // helper method: get i-th column from matrix
    private int[] getCol(int[][] matrix, int index) {
        int[] col = new int[matrix.length];
        for (int i = 0; i < matrix.length; i++) {
            col[i] = matrix[i][index];
        }
        return col;
    }

    // helper method: set col into i-th column in matrix
    private void setCol(int[][] matrix, int index, int[] col) {
        for (int i = 0; i < matrix.length; i++) {
            matrix[i][index] = col[i];
        }
    }

    /**
     * Helper method for multiplication of two vectors in AES.GF(2**8).
     * Takes two vectors of equal length as parameters a and b.
     * @return integer representation of result as AES.GF(2**8) element
     */
    private int vectorMulGF(int[] a, int[] b){
        assert a.length == b.length;
        GF res = new GF(0);

        for (int i = 0; i < a.length; i++) {
            res = GF.add(res, GF.mul(new GF(a[i]), new GF(b[i])));
        }

        return res.num;
    }

    // helper method: XOR two arrays element-wise
    private int[] vectorXOR(int[] a, int[] b) {
        int[] c = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            c[i] = a[i] ^ b[i];
        }

        return c;
    }

    public static void main(String[] args) {
        // test case
        int[][] plainText = {
                {0x32, 0x88, 0x31, 0xe0},
                {0x43, 0x5a, 0x31, 0x37},
                {0xf6, 0x30, 0x98, 0x07},
                {0xa8, 0x8d, 0xa2, 0x34}
        };

        System.out.println("Plain text:");
        for (int i = 0; i < 4; i++) {
            System.out.println(Arrays.toString(plainText[i]));
        }

        int[][] key = {
                {0x2b, 0x28, 0xab, 0x09},
                {0x7e, 0xae, 0xf7, 0xcf},
                {0x15, 0xd2, 0x15, 0x4f},
                {0x16, 0xa6, 0x88, 0x3c}
        };

        AES aes = new AES();
        int[][] cipherText = aes.encrypt(plainText, key);
        int[][] decodedText = aes.decrypt(cipherText, key);

        System.out.println("Decoded text:");
        for (int i = 0; i < 4; i++) {
            System.out.println(Arrays.toString(decodedText[i]));
        }
    }
}
